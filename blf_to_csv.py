import tkinter as tk
from tkinter import filedialog

import os
import candas as cd
import scipy.io
import datetime

def process_blf(input_path, output_path):
    try:
        script_dir = os.path.dirname(os.path.realpath(__file__))

        # Provide database .dbc and .ini folder location
        db = cd.load_dbc(f"{script_dir}\\BOLTVS_Ch1_Rev2")

        # Provide file path without extension
        log_data = cd.from_file(db, input_path)

        # Signals can be accessed like this
        # print(log_data["Pack_Voltage"])

        ###### Convert the times in the output .mat file to time since first event, not epoch
        mat = scipy.io.loadmat(f'{input_path}.mat')

        # Delete the .mat file automatically generated by candas
        os.remove(f'{input_path}.mat')

        # find start time
        min_epoch_utc = float('inf')
        for key, data_points in mat.items():
            if "__" not in key:
                # print(f'{key}: {data_points[0]}')
                this_time = data_points[0][0]
                if this_time < min_epoch_utc:
                    min_epoch_utc = this_time

        # report start time
        local_dt = datetime.datetime.fromtimestamp(min_epoch_utc)
        date_time_string = local_dt.strftime("%I:%M:%S %p %Z on %m/%d/%Y ")
        print(f'First was datapoint at: {date_time_string}')

        # change start times
        for key, data_points in mat.items():
            if "__" not in key:
                for row in data_points:
                    row[0] = row[0]-min_epoch_utc

        print("Saving output .mat file...")
        input_file_name = os.path.basename(input_path)
        scipy.io.savemat(f'{output_path}\\{input_file_name}_seconds.mat', mat)
        print("Finished saving.")

        # Process succeeded
        return date_time_string
    
    except Exception as e:
        print("Error:", e)
        # Process failed
        return False

def browse_input_file():
    file_path = filedialog.askopenfilename(filetypes=[("BLF files", "*.blf")])
    if file_path:
        input_entry.delete(0, tk.END)
        input_entry.insert(0, file_path)

def browse_output_folder():
    folder_path = filedialog.askdirectory(initialdir=get_default_download_path())
    if folder_path:
        output_entry.delete(0, tk.END)
        output_entry.insert(0, folder_path)

def process_files():
    # Reset success indicator
    message_label.config(text="Processing...", fg="black")
    root.update_idletasks()

    # Process data
    input_path = input_entry.get()
    output_path = output_entry.get()

    input_path = os.path.splitext(input_path)[0]
    timestamp = process_blf(input_path, output_path)

    # Set success indicator
    if timestamp is not False:
        message_label.config(text=f"Success. First timestamp: {timestamp}", fg="green")
    else:
        message_label.config(text="Failure", fg="red")

def get_default_download_path():
    # Get the path to the user's home directory
    home_dir = os.path.expanduser("~")
    # Append "Downloads" to the home directory path
    default_download_path = os.path.join(home_dir, "Downloads")
    return default_download_path

# Create the main window
root = tk.Tk()
root.title("BLF Processing Tool")

# Create input file selection
input_label = tk.Label(root, text="Input BLF File:")
input_label.grid(row=0, column=0, padx=5, pady=5)

input_entry = tk.Entry(root, width=50)
input_entry.grid(row=0, column=1, padx=5, pady=5)

input_button = tk.Button(root, text="Browse", command=browse_input_file)
input_button.grid(row=0, column=2, padx=5, pady=5)

# Create output folder selection
output_label = tk.Label(root, text="Output Folder:")
output_label.grid(row=1, column=0, padx=5, pady=5)

output_entry = tk.Entry(root, width=50)
output_entry.grid(row=1, column=1, padx=5, pady=5)

output_path = get_default_download_path()  # Set default output path to Downloads
output_entry.insert(0, output_path)  # Insert default output path into the entry field

output_button = tk.Button(root, text="Browse", command=browse_output_folder)
output_button.grid(row=1, column=2, padx=5, pady=5)

# Create process button
process_button = tk.Button(root, text="Process", command=process_files)
process_button.grid(row=2, column=1, padx=5, pady=10)

# Create message label
message_label = tk.Label(root, text="", fg="black")
message_label.grid(row=3, column=1, padx=5, pady=5)

# Run the Tkinter event loop
root.mainloop()